import React, { useState } from 'react';
import {
  View,
  StyleSheet,
  Text,
  TouchableOpacity,
  Alert,
  TextInput,
  Switch,
  SafeAreaView,
} from 'react-native';
import { useAuth } from '../../contexts/AuthContext';
import { apiService } from '../../services/api';
import { colors, spacing } from '../../theme';
import Button from '../../shared/components/Button';

export default function AuthScreen() {
  const { login, isDevMode, setDevMode, setDevUser } = useAuth();
  const [devUserId, setDevUserId] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleGoogleAuth = async () => {
    try {
      setIsLoading(true);
      const authUrl = await apiService.googleAuth();
      // In a real app, you'd use expo-web-browser to open this URL
      // and handle the callback with expo-auth-session
      Alert.alert(
        'Google Auth',
        `Open this URL in your browser: ${authUrl}`,
        [{ text: 'OK' }]
      );
    } catch (error) {
      Alert.alert('Error', 'Failed to initiate Google authentication');
    } finally {
      setIsLoading(false);
    }
  };

  const handleAppleAuth = async () => {
    try {
      setIsLoading(true);
      const authUrl = await apiService.appleAuth();
      // In a real app, you'd use expo-web-browser to open this URL
      // and handle the callback with expo-auth-session
      Alert.alert(
        'Apple Auth',
        `Open this URL in your browser: ${authUrl}`,
        [{ text: 'OK' }]
      );
    } catch (error) {
      Alert.alert('Error', 'Failed to initiate Apple authentication');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDevModeToggle = (enabled: boolean) => {
    setDevMode(enabled);
    if (!enabled) {
      setDevUserId('');
    }
  };

  const handleDevUserSubmit = async () => {
    if (!devUserId.trim()) {
      Alert.alert('Error', 'Please enter a user ID');
      return;
    }

    try {
      setIsLoading(true);
      await setDevUser(devUserId.trim());
      Alert.alert('Success', 'Dev user set successfully');
    } catch (error) {
      Alert.alert('Error', 'Failed to set dev user');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.content}>
        <Text style={styles.title}>Pin</Text>
        <Text style={styles.subtitle}>Sign in to continue</Text>

        <View style={styles.authButtons}>
          <Button
            title="Continue with Google"
            onPress={handleGoogleAuth}
            variant="primary"
            size="lg"
            disabled={isLoading}
            style={styles.authButton}
          />
          <Button
            title="Continue with Apple"
            onPress={handleAppleAuth}
            variant="secondary"
            size="lg"
            disabled={isLoading}
            style={styles.authButton}
          />
        </View>

        <View style={styles.devSection}>
          <View style={styles.devHeader}>
            <Text style={styles.devTitle}>Development Mode</Text>
            <Switch
              value={isDevMode}
              onValueChange={handleDevModeToggle}
              trackColor={{ false: colors.border, true: colors.textSecondary }}
              thumbColor={isDevMode ? colors.background : colors.text}
            />
          </View>

          {isDevMode && (
            <View style={styles.devContent}>
              <Text style={styles.devDescription}>
                Enter a user ID to use in development mode. These are randomly generated by the backend, so look in the backend logs to find them.
              </Text>
              <TextInput
                style={styles.devInput}
                placeholder="123e4567-e89b-12d3-a456-426614174000"
                value={devUserId}
                onChangeText={setDevUserId}
                autoCapitalize="none"
                autoCorrect={false}
              />
              <Button
                title="Set Dev User"
                onPress={handleDevUserSubmit}
                variant="primary"
                size="md"
                disabled={isLoading || !devUserId.trim()}
                style={styles.devButton}
              />
            </View>
          )}
        </View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  content: {
    flex: 1,
    padding: spacing.lg,
    justifyContent: 'center',
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: colors.text,
    textAlign: 'center',
    marginBottom: spacing.sm,
  },
  subtitle: {
    fontSize: 16,
    color: colors.textSecondary,
    textAlign: 'center',
    marginBottom: spacing.xl,
  },
  authButtons: {
    gap: spacing.md,
    marginBottom: spacing.xl,
  },
  authButton: {
    width: '100%',
  },
  devSection: {
    backgroundColor: colors.postBackground,
    borderRadius: 12,
    padding: spacing.md,
    borderWidth: 1,
    borderColor: colors.border,
  },
  devHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: spacing.sm,
  },
  devTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
  },
  devContent: {
    gap: spacing.sm,
  },
  devDescription: {
    fontSize: 14,
    color: colors.textSecondary,
    marginBottom: spacing.sm,
  },
  devInput: {
    borderWidth: 1,
    borderColor: colors.border,
    borderRadius: 8,
    padding: spacing.sm,
    fontSize: 14,
    color: colors.text,
    backgroundColor: colors.background,
  },
  devButton: {
    alignSelf: 'flex-start',
  },
});
